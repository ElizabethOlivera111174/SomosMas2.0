<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Project.Api</name>
    </assembly>
    <members>
        <member name="M:Project.Api.Controllers.AuthController.Get">
            <summary>
            Endpoint para obtener los datos almacenados del usuario logueado
            </summary>
            <remarks>
            <para>
            Formato de peticion: https:// nombreDelServidor /auth/me
            </para>
            </remarks>
            <returns>
            FirstName , LastName ,Email ,Photo, RoleId 
            </returns>
            <response code="200">Solicitud concretada con exito</response>
            <response code="400">No pudo retornar los datos del usuario</response> 
            <response code="401">Credenciales incorrectas</response>
        </member>
        <member name="M:Project.Api.Controllers.AuthController.Register(Project.Domain.DTOs.UserDTOs.UserInsertDTO)">
            <summary>
            Endpoint para el registro de un usuario en el sistema
            </summary>
            <remarks>
            Formato de peticion: <br></br>
            {
                <br></br>
                "FirstName*": "string",<br></br>
                "LastName*": "string",<br></br>
                "Email*": "string",<br></br>
                "Password*": "string"<br></br>
            }
            <br></br>
            Ejemplo de solicitud: <br></br>
            {
                <br></br>
                "FirstName*": "Alkemy",<br></br>
                "LastName*": "Aceleracion",<br></br>
                "Email*": "user@example.com",<br></br>
                "Password*": "alkemy1234"<br></br>
            }
            </remarks>
            <param name="UserInsertDTO">DTO para la creacion de un nuevo Miembro</param>
            <returns>
                Devuelve el token del usuario en caso de ser creado o Response indicando el error
            </returns>
            <response code="200">El usuario se inserto con exito</response>
            <response code="400">No se ha podido procesar la solicitud con estos datos</response>
            <response code="401">Credenciales incorrectas</response>
        </member>
        <member name="M:Project.Api.Controllers.AuthController.Login(Project.Domain.DTOs.UserDTOs.LoginDTO)">
            <summary>
            Endpoint para el login de un usuario en el sistema
            </summary>
            <remarks>
            Formato de peticion: <br></br>
            {
                <br></br>
                "Email": "string",<br></br>
                "Password": "string"<br></br>
            }
            <br></br>
            Ejemplo de solicitud: <br></br>
            {
                <br></br>
                "Email": "user@example.com",<br></br>
                "Password": "alkemy1234"<br></br>
            }
            </remarks>
            <param name="LoginDTO">DTO para la creacion de un nuevo Miembro</param>
            <returns>
                Devuelve el token del usuario en caso de que las credenciales sean correctas o Response indicando el error
            </returns>
            <response code="200">El usuario se logueo con exito</response>
            <response code="400">No se ha podido procesar la solicitud con estos datos</response>
            <response code="401">Credenciales incorrectas</response>
        </member>
        <member name="M:Project.Api.Controllers.CategoryController.GetAll(System.Int32)">
            <summary>
            Endpoint para obtener todas las entradas de Categories. Se integra una paginacion para optimizar
            y hacer mas performante la llamada. Se debe ser ADMINISTRADOR
            </summary>
            <remarks>
            <para>
            Formato de peticion: https:// nombreDelServidor /Category ?page =pagina que se consulta
            </para>
            <para>
            Ejemplo de peticion: https://localhost:44353/Category?page=1
            </para>
            </remarks>
            <param name="page">
            Pagina que se pide a la Db. Si la pagina = 0, entonces regresa por defecto pagina: 1
            </param>
            <returns>
            Entradas de miembros, con 10 entradas por pagina
            </returns>
            <response code="200">Solicitud concretada con exito</response>
            <response code="401">Credenciales no validas</response> 
        </member>
        <member name="M:Project.Api.Controllers.CategoryController.GetById(System.Int32)">
            <summary>
            Endpoint para la obtenci√≥n de una Category. Se debe ser ADMINISTRADOR
            </summary>
            <remarks>
            <para>
            Formato de solicitud: https:// nombreDelServidor /Category ?id=categoryaBuscar
            </para>
            <para>
            Ejemplo de solicitud: https://localhost:44353/Category?id=1
            </para>
            </remarks>
            <param name="id">Id de la Category a buscar, se recibe por solicitud</param>
            <returns>
            
            </returns>
            <response code="200">Se ha eliminado la Category correctamente</response>
            <response code="401">Credenciales invalidas</response> 
        </member>
        <member name="M:Project.Api.Controllers.CategoryController.Post(Project.Domain.DTOs.CategoriesDTOs.CategoryDTO)">
            <summary>
            Endpoint para la creacion de un nueva Category. Se debe ser ADMINISTRADOR
            </summary>
            <remarks>
            Formato de peticion: <br></br>
            {
                <br></br>
                "name": "string",<br></br>
                "description": "string",<br></br>
                "image": "IFormFile",<br></br>
            }
            <br></br>
            Ejemplo de solicitud: <br></br>
            {
                <br></br>
                "name": "CategoryPrueba",<br></br>
                "image": "https://cohorte-septiembre-91ddd87b.s3.amazonaws.com/Category_2510202114:44:13BS_Revenant_Grace.png",<br></br>
                "description": "DescripcionPrueba",<br></br>
            }
            </remarks>
            <param name="categoryDTO">DTO para la creacion de una nueva Category</param>
            <response code="200">LA  Category se inserto con exito</response>
            <response code="400">No se ha podido procesar la solicitud con estos datos</response>
            <response code="401">Credenciales incorrectas</response>
        </member>
        <member name="M:Project.Api.Controllers.CategoryController.Update(System.Int32,Project.Domain.DTOs.CategoriesDTOs.UpdateCategoryDTO)">
            <summary>
            Endpoint para la modificacion de Categories. Se debe ser ADMINISTRADOR
            </summary>
            <remarks>
            Formato de solicitud: <br></br>
            {
                <br></br>
                "id": 0,<br></br>
                "name": "string",<br></br>
                "image": "IFormFile",<br></br>
                "description": "string"<br></br>
            }
            <br></br>
            Ejemplo de solicitud: <br></br>
            {
                <br></br>
                "name": "ModificacionCategory",<br></br>
                "image": "https://cohorte-septiembre-91ddd87b.s3.amazonaws.com/Category_2510202114:44:13BS_Revenant_Grace.png",<br></br>
                "description": "DescripcionPrueba",<br></br>
            }
            </remarks>
            <param name="updateCategoryDTO">DTO para la modificacion de Category</param>
            <returns></returns>
            <response code="200">Solicitud ejecutada correctamente</response>
            <response code="400">No se ha podido completar la solicitud</response>
            <response code="401">Credenciales invalidas</response> 
        </member>
        <member name="M:Project.Api.Controllers.CategoryController.Delete(System.Int32)">
            <summary>
            Endpoint para eliminacion de baja logica de una Category. Se debe ser ADMINISTRADOR
            </summary>
            <remarks>
            <para>
            Formato de solicitud: https:// nombreDelServidor /Category ?id=categoryAborrar
            </para>
            <para>
            Ejemplo de solicitud: https://localhost:44353/Category?id=1
            </para>
            </remarks>
            <param name="id">Id de la Category a borrarse, se recibe por solicitud</param>
            <returns>
            
            </returns>
            <response code="200">Se ha eliminado la Category correctamente</response>
            <response code="401">Credenciales invalidas</response> 
        </member>
        <member name="M:Project.Api.Controllers.CommentsController.GetAll(System.Int32)">
            <summary>
            Endpoint para obtener todas las entradas de Comentarios. Se integra una paginacion para optimizar
            y hacer mas performante la llamada. Se debe ser ADMINISTRADOR
            </summary>
            <remarks>
            <para>
            Formato de peticion: https:// nombreDelServidor /coments ?page =pagina que se consulta
            </para>
            <para>
            Ejemplo de peticion: https://localhost:44353/coments?page=1
            </para>
            </remarks>
            <param name="page">
            Pagina que se pide a la Db. Si la pagina = 0, entonces regresa por defecto pagina: 1
            </param>
            <returns>
            Entradas de comentarios, con 10 entradas por pagina
            </returns>
            <response code="200">Solicitud concretada con exito</response>
            <response code="401">Credenciales no validas</response> 
        </member>
        <member name="M:Project.Api.Controllers.CommentsController.Get(System.Int32)">
            <summary>
            Endpoint para obtener una entrada de Comentarios determinada. Es publica
            </summary>
            <returns>
            Entradas de un comentario.
            </returns>
            <response code="200">Solicitud concretada con exito</response>
            <response code="401">Credenciales no validas</response> 
        </member>
        <member name="M:Project.Api.Controllers.CommentsController.Insert(Project.Domain.DTOs.NewCommentsDTOs.NewCommentsDTO)">
            <summary>
            Endpoint para la creacion de un nuevo Comentario. Es publico
            </summary>
            <remarks>
            Formato de peticion: <br></br>
            {
                <br></br>
                "body": "string",<br></br>
                "userId": 0,<br></br>
                "newId": 0      
             
            }
            <br></br>
            Ejemplo de solicitud: <br></br>
            {
                <br></br>
                "body": "ejemplo Texto",<br></br>
                "userId": 0,<br></br>
                "newId": 0   
                
            }
            </remarks>
            <param name="newCommentsDTO">DTO para la creacion de un nuevo comentario</param>
            <returns>
            Falta formato para integrar clase Result
            </returns>
            <response code="200">El usuario se inserto con exito</response>
            <response code="400">No se ha podido procesar la solicitud con estos datos</response>
            <response code="401">Credenciales incorrectas</response>
        </member>
        <member name="M:Project.Api.Controllers.CommentsController.Delete(System.Int32)">
            <summary>
            Endpoint para eliminacion de baja logica de un Comentario. Se debe ser ADMINISTRADOR o USUARIO
            </summary>
            <remarks>
            <para>
            Formato de solicitud: https:// nombreDelServidor /comments ?id=miembroAborrar
            </para>
            <para>
            Ejemplo de solicitud: https://localhost:44353/comments?id=1
            </para>
            </remarks>
            <param name="id">Id del comentario a borrarse, se recibe por solicitud</param>
            <returns>
            
            </returns>
            <response code="200">Se ha eliminado al comentario correctamente</response>
            <response code="401">Credenciales invalidas</response> 
        </member>
        <member name="M:Project.Api.Controllers.CommentsController.Put(System.Int32,Project.Domain.DTOs.CommentsDTOs.CommentUpdateDTO)">
            <summary>
            Endpoint para la modificacion de comentario. Se debe ser ADMINISTRADOR o USUARIO
            </summary>
            <remarks>
            Formato de peticion: <br></br>
            {
                <br></br>
                "body": "string",<br></br>
                "userId": 0,<br></br>
                "newId": 0      
             
            }
            <br></br>
            Ejemplo de solicitud: <br></br>
            {
                <br></br>
                "body": "ejemplo Texto",<br></br>
                "userId": 0,<br></br>
                "newId": 0   
                
            }
            </remarks>
            <param name="CommentUpdateDTO">DTO para la modificacion de Miembros</param> 
            <param name="id">DTO para la modificacion de Miembros</param>        
            <returns></returns>
            <response code="200">Solicitud ejecutada correctamente</response>
            <response code="400">No se ha podido completar la solicitud</response>
            <response code="401">Credenciales invalidas</response> 
        </member>
        <member name="M:Project.Api.Controllers.MemberController.GetAll(System.Int32)">
            <summary>
            Endpoint para obtener todas las entradas de Miembros. Se integra una paginacion para optimizar
            y hacer mas performante la llamada. Se debe ser ADMINISTRADOR
            </summary>
            <remarks>
            <para>
            Formato de peticion: https:// nombreDelServidor /member ?page =pagina que se consulta
            </para>
            <para>
            Ejemplo de peticion: https://localhost:44353/member?page=1
            </para>
            </remarks>
            <param name="page">
            Pagina que se pide a la Db. Si la pagina = 0, entonces regresa por defecto pagina: 1
            </param>
            <returns>
            Entradas de miembros, con 10 entradas por pagina
            </returns>
            <response code="200">Solicitud concretada con exito</response>
            <response code="401">Credenciales no validas</response> 
        </member>
        <member name="M:Project.Api.Controllers.MemberController.Post(Project.Domain.DTOs.MembersDTOs.MemberInsertDTO)">
            <summary>
            Endpoint para la creacion de un nuevo Miembro. Se debe ser ADMINISTRADOR
            </summary>
            <remarks>
            Formato de peticion: <br></br>
            {
                <br></br>
                "name": "string",<br></br>
                "facebookUrl": "string",<br></br>
                "instagramUrl": "string",<br></br>
                "linkedinUrl": "string",<br></br>
                "image": "string",<br></br>
                "description": "string"<br></br>
            }
            <br></br>
            Ejemplo de solicitud: <br></br>
            {
                <br></br>
                "name": "MiembroPrueba",<br></br>
                "facebookUrl": "https://www.facebook.com/MiembroPrueba",<br></br>
                "instagramUrl": "https://www.instagram.com/MimebroPrueba",<br></br>
                "linkedinUrl": "https://www.instagram.com/MiembroPrueba",<br></br>
                "image": "https://cohorte-septiembre-91ddd87b.s3.amazonaws.com/Member_2510202114:44:13BS_Revenant_Grace.png",<br></br>
                "description": "DescripcionPrueba",<br></br>
            }
            </remarks>
            <param name="membersDTO">DTO para la creacion de un nuevo Miembro</param>
            <returns>
            Falta formato para integrar clase Result
            </returns>
            <response code="200">El usuario se inserto con exito</response>
            <response code="400">No se ha podido procesar la solicitud con estos datos</response>
            <response code="401">Credenciales incorrectas</response>
        </member>
        <member name="M:Project.Api.Controllers.MemberController.Delete(System.Int32)">
            <summary>
            Endpoint para eliminacion de baja logica de un Miembro. Se debe ser ADMINISTRADOR
            </summary>
            <remarks>
            <para>
            Formato de solicitud: https:// nombreDelServidor /member ?id=miembroAborrar
            </para>
            <para>
            Ejemplo de solicitud: https://localhost:44353/member?id=1
            </para>
            </remarks>
            <param name="id">Id del Miembro a borrarse, se recibe por solicitud</param>
            <returns>
            
            </returns>
            <response code="200">Se ha eliminado al Miembro correctamente</response>
            <response code="401">Credenciales invalidas</response> 
        </member>
        <member name="M:Project.Api.Controllers.MemberController.Update(Project.Domain.DTOs.MembersDTOs.MemberUpdateDTO)">
            <summary>
            Endpoint para la modificacion de Miembros. Se debe ser ADMINISTRADOR
            </summary>
            <remarks>
            Formato de solicitud: <br></br>
            {
                <br></br>
                "id": 0,<br></br>
                "name": "string",<br></br>
                "facebookUrl": "string",<br></br>
                "instagramUrl": "string",<br></br>
                "linkedinUrl": "string",<br></br>
                "image": "string",<br></br>
                "description": "string"<br></br>
            }
            <br></br>
            Ejemplo de solicitud: <br></br>
            {
                <br></br>
                "name": "ModificacionMiembro",<br></br>
                "facebookUrl": "https://www.facebook.com/ModificacionMiembro",<br></br>
                "instagramUrl": "https://www.instagram.com/ModificacionMiembro",<br></br>
                "linkedinUrl": "https://www.instagram.com/ModificacionMiembro",<br></br>
                "image": "https://cohorte-septiembre-91ddd87b.s3.amazonaws.com/Member_2510202114:44:13BS_Revenant_Grace.png",<br></br>
                "description": "DescripcionPrueba",<br></br>
            }
            </remarks>
            <param name="memberUpdateDTO">DTO para la modificacion de Miembros</param>
            <returns></returns>
            <response code="200">Solicitud ejecutada correctamente</response>
            <response code="400">No se ha podido completar la solicitud</response>
            <response code="401">Credenciales invalidas</response> 
        </member>
        <member name="M:Project.Api.Controllers.NewsController.GetById(System.Int32)">
            <summary>
            Endpoint para consultar una Novedad por su id.
            </summary>
            <remarks>
            <para>
            Formato de solicitud: https:// nombreDelServidor /News ?id=IdNovedadAConsultar
            </para>
            <para>
            Ejemplo de solicitud: https://localhost:44353/News?id=1
            </para>
            </remarks>
            <param name="id">Id de la Novedad a consultar, se recibe por parametro</param>
            <returns>
            El resultado de la peticion
            </returns>
            <response code="200">Solicitud concretada con exito</response>
            <response code="401">Credenciales invalidas</response>
            <response code="400">No se ha podido procesar la solicitud con estos datos</response>
        </member>
        <member name="M:Project.Api.Controllers.NewsController.GetAll(System.Int32)">
            <summary>
            Endpoint para obtener todas las Novedades. Se integra una paginacion para optimizar
            y hacer mas performante la llamada.
            </summary>
            <remarks>
            <para>
            Formato de peticion: https:// nombreDelServidor /News ?page =pagina que se consulta
            </para>
            <para>
            Ejemplo de peticion: https://localhost:44353/News?page=1
            </para>
            </remarks>
            <param name="page">
            Pagina que se pide a la Db. Si la pagina = 0, entonces regresa por defecto pagina: 1
            </param>
            <returns>
            Entradas de novedades, con 10 entradas por pagina
            </returns>
            <response code="200">Solicitud concretada con exito</response>
            <response code="401">Credenciales no validas</response>
            <response code="404">Novedad no encontrada</response>
        </member>
        <member name="M:Project.Api.Controllers.NewsController.Insert(Project.Domain.DTOs.NewsDTOs.NewsInsertDTO)">
            <summary>
            Endpoint para la creacion de una nueva Novedad. Se debe ser ADMINISTRADOR
            </summary>
            <remarks>
            Formato de peticion: <br></br>
            {
                <br></br>
                "name": "string",<br></br>
                "content": "string",<br></br>
                "image": "IFormFile",<br></br>
                "categoriaId": "int"<br></br>
            }
            <br></br>
            Ejemplo de solicitud: <br></br>
            {
                <br></br>
                "name": "NovedadPrueba",<br></br>
                "content": "contenidoNovedad",<br></br>
                "image": "https://cohorte-septiembre-91ddd87b.s3.amazonaws.com/NuevaImagen.jpg",<br></br>
                "categoriaId": "Numero de Id de la categoria a la que pertenece",<br></br>
            }
            </remarks>
            <param name="newsInsertDTO">DTO para la creacion de una nueva Novedad</param>
            <returns>
            El resultado de la peticion
            </returns>
            <response code="200">La Novedad se inserto con exito</response>
            <response code="400">No se ha podido procesar la solicitud con estos datos</response>
            <response code="401">Credenciales incorrectas</response>
        </member>
        <member name="M:Project.Api.Controllers.NewsController.Delete(System.Int32)">
            <summary>
            Endpoint para eliminacion de baja logica de una Novedad. Se debe ser ADMINISTRADOR
            </summary>
            <remarks>
            <para>
            Formato de solicitud: https:// nombreDelServidor /News ?id=IdNovedadAborrar
            </para>
            <para>
            Ejemplo de solicitud: https://localhost:44353/News?id=1
            </para>
            </remarks>
            <param name="id">Id de la Novedad a borrar, se recibe por parametro</param>
            <returns>
            El resultado de la peticion
            </returns>
            <response code="200">Se ha eliminado la Novedad correctamente</response>
            <response code="401">Credenciales invalidas</response>
            <response code="400">No se ha podido procesar la solicitud con estos datos</response>
        </member>
        <member name="M:Project.Api.Controllers.NewsController.Update(Project.Domain.DTOs.NewsDTOs.NewsUpdateDTO,System.Int32)">
            <summary>
            Endpoint para la modificacion de una nueva Novedad. Se debe ser ADMINISTRADOR
            </summary>
            <remarks>
            Formato de peticion: <br></br>
            {
                <br></br>
                "name": "string",<br></br>
                "content": "string",<br></br>
                "image": "IFormFile",<br></br>
                "categoriaId": "int"<br></br>
            }
            <br></br>
            Ejemplo de solicitud: <br></br>
            {
                <br></br>
                "name": "nombreNuevo",<br></br>
                "content": "contenidoNuevo",<br></br>
                "image": "https://cohorte-septiembre-91ddd87b.s3.amazonaws.com/NuevaImagen.jpg",<br></br>
                "categoriaId": "Numero de Id de la categoria a la que pertenece",<br></br>
            }
            </remarks>
            <param name="id">Id de la Novedad a modificar</param>
            <param name="newsUpdateDTO">DTO para la modificacion de una nueva Novedad</param>
            <returns>
            El resultado de la peticion
            </returns>
            <response code="200">La Novedad se inserto con exito</response>
            <response code="400">No se ha podido procesar la solicitud con estos datos</response>
            <response code="401">Credenciales incorrectas</response>
        </member>
        <member name="M:Project.Api.Controllers.SlidesController.Get">
            <summary>
            Endpoint para obtener todas las entradas de Sidles.
            Se debe ser ADMINISTRADOR
            </summary>
        </member>
        <member name="M:Project.Api.Controllers.SlidesController.GetPublic">
            <summary>
            Endpoint para la creacion de un nuevo Sidle. Se debe ser ADMINISTRADOR
            </summary>
        </member>
        <member name="M:Project.Api.Controllers.SlidesController.Insert(Project.Domain.DTOs.SidlesDTOs.SlidesCreateDTO)">
            <summary>
            Endpoint para la creacion de un nuevo Sidle. Se debe ser ADMINISTRADOR
            </summary>
        </member>
        <member name="M:Project.Api.Controllers.SlidesController.UpdateSlide(System.Int32,Project.Domain.DTOs.SidlesDTOs.UpdateSlideDTO)">
            <summary>
            Este metodo permite modificar un Slide de la base de datos
            </summary>
            <remarks>Ejemplo: 
            {
            "imageUrl": "url modificada de la imagen",
            "text": "slide1 a modificar",
            "order": 14,
            "organizationId": 2
            }
            
            </remarks>
            <param name="updateSlideDTO"></param>
            <returns>
            <para>
            Los nuevos datos del Slide + un mensaje de modificacion correcta
            </para>
            <para>Caso contrario, BadRequest para cuando existe un slide con el mismo Id</para>
            </returns> 
        </member>
        <member name="M:Project.Api.Controllers.TestimonialsController.GetAll(System.Int32)">
            <summary>
            Endpoint para obtener todas las entradas de Testimonials. Se integra una paginacion para optimizar
            y hacer mas performante la llamada. Se debe estar logueado
            </summary>
            <remarks>
            <para>
            Formato de peticion: https:// nombreDelServidor /testimonials ?page =pagina que se consulta
            </para>
            <para>
            Ejemplo de peticion: https://localhost:44353/testimonials?page=1
            </para>
            </remarks>
            <param name="page">
            Pagina que se pide a la Db. Si la pagina = 0, entonces regresa por defecto pagina: 1
            </param>
            <returns>
            Entradas de testimonios, con 10 entradas por pagina
            </returns>
            <response code="200">Solicitud concretada con exito</response>
            <response code="401">Credenciales no validas</response> 
            <response code="204">Pagina sin contenido</response> 
        </member>
        <member name="M:Project.Api.Controllers.TestimonialsController.Insert(Project.Domain.DTOs.TestimonialsDTOs.TestimonialsCreateDTO)">
            <summary>
            Endpoint para la creacion de un nuevo testimonio. Es necesario ser ADMINISTRADOR
            </summary>
            <remarks>
            Formato de peticion: <br></br>
            {
                <br></br>
                "name": "string",<br></br>
                "content": "string",<br></br>
                "image": File      
             
            }
            <br></br>
            Ejemplo de solicitud: <br></br>
            {
                <br></br>
                "name": "Testimonial prueba name",<br></br>
                "content": "Testimonial prueba contenido",<br></br>
                "image": File   
                
            }
            </remarks>
            <param name="testimonialDTO">DTO para la creacion de un nuevo testimonio</param>
            <response code="200">El testimonio se inserto con exito</response>
            <response code="400">No se ha podido procesar la solicitud con estos datos</response>
            <response code="401">Credenciales incorrectas</response>
        </member>
        <member name="M:Project.Api.Controllers.TestimonialsController.Delete(System.Int32)">
            <summary>
            Endpoint para eliminacion de baja logica de un testimonio. Se debe ser ADMINISTRADOR
            </summary>
            <remarks>
            <para>
            Formato de solicitud: https:// nombreDelServidor /testimonials ?id=testimonialAborrar
            </para>
            <para>
            Ejemplo de solicitud: https://localhost:44353/testimonials?id=1
            </para>
            </remarks>
            <param name="id">Id del testimonials a borrarse, se recibe por solicitud</param>
            <returns>
            
            </returns>
            <response code="200">Se ha eliminado al testimonial correctamente</response>
            <response code="401">Credenciales invalidas</response> 
            <response code="404">No se ha encontrado el testimonial</response> 
        </member>
        <member name="M:Project.Api.Controllers.TestimonialsController.Update(System.Int32,Project.Domain.DTOs.TestimonialsDTOs.TestimonialsUpdateDTO)">
            <summary>
            Endpoint para la modificacion de testimonials. Se debe ser ADMINISTRADOR
            </summary>
            <remarks>
            Formato de solicitud: <br></br>
            {
                <br></br>
                "id": 0,<br></br>
                "name": "string",<br></br>
                "content": "string",<br></br>
                "image": File,<br></br>
            }
            <br></br>
            Ejemplo de solicitud: <br></br>
            {
                <br></br>
                "name": "ModificacionTestimonio",<br></br>
                "content": "Nuevo contenido",<br></br>
                "image": File,<br></br>
            }
            </remarks>
            <param name="testimonialsUpdateDTO">DTO para la modificacion de testimonios</param>
            <param name="id">Id del testimonial que se quiere modificar</param>
            <returns></returns>
            <response code="200">Solicitud ejecutada correctamente</response>
            <response code="401">Credenciales invalidas</response> 
        </member>
    </members>
</doc>
